// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: products/v1/products.proto

package productsv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/BradErz/monorepo/gen/go/products/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProductsServiceName is the fully-qualified name of the ProductsService service.
	ProductsServiceName = "products.v1.ProductsService"
)

// ProductsServiceClient is a client for the products.v1.ProductsService service.
type ProductsServiceClient interface {
	ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error)
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error)
	GetProductOverview(context.Context, *connect_go.Request[v1.GetProductOverviewRequest]) (*connect_go.Response[v1.GetProductOverviewResponse], error)
}

// NewProductsServiceClient constructs a client for the products.v1.ProductsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProductsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &productsServiceClient{
		listProducts: connect_go.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+"/products.v1.ProductsService/ListProducts",
			opts...,
		),
		createProduct: connect_go.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+"/products.v1.ProductsService/CreateProduct",
			opts...,
		),
		updateProduct: connect_go.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+"/products.v1.ProductsService/UpdateProduct",
			opts...,
		),
		getProduct: connect_go.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+"/products.v1.ProductsService/GetProduct",
			opts...,
		),
		getProductOverview: connect_go.NewClient[v1.GetProductOverviewRequest, v1.GetProductOverviewResponse](
			httpClient,
			baseURL+"/products.v1.ProductsService/GetProductOverview",
			opts...,
		),
	}
}

// productsServiceClient implements ProductsServiceClient.
type productsServiceClient struct {
	listProducts       *connect_go.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	createProduct      *connect_go.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	updateProduct      *connect_go.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	getProduct         *connect_go.Client[v1.GetProductRequest, v1.GetProductResponse]
	getProductOverview *connect_go.Client[v1.GetProductOverviewRequest, v1.GetProductOverviewResponse]
}

// ListProducts calls products.v1.ProductsService.ListProducts.
func (c *productsServiceClient) ListProducts(ctx context.Context, req *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// CreateProduct calls products.v1.ProductsService.CreateProduct.
func (c *productsServiceClient) CreateProduct(ctx context.Context, req *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// UpdateProduct calls products.v1.ProductsService.UpdateProduct.
func (c *productsServiceClient) UpdateProduct(ctx context.Context, req *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// GetProduct calls products.v1.ProductsService.GetProduct.
func (c *productsServiceClient) GetProduct(ctx context.Context, req *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// GetProductOverview calls products.v1.ProductsService.GetProductOverview.
func (c *productsServiceClient) GetProductOverview(ctx context.Context, req *connect_go.Request[v1.GetProductOverviewRequest]) (*connect_go.Response[v1.GetProductOverviewResponse], error) {
	return c.getProductOverview.CallUnary(ctx, req)
}

// ProductsServiceHandler is an implementation of the products.v1.ProductsService service.
type ProductsServiceHandler interface {
	ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error)
	GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error)
	GetProductOverview(context.Context, *connect_go.Request[v1.GetProductOverviewRequest]) (*connect_go.Response[v1.GetProductOverviewResponse], error)
}

// NewProductsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductsServiceHandler(svc ProductsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/products.v1.ProductsService/ListProducts", connect_go.NewUnaryHandler(
		"/products.v1.ProductsService/ListProducts",
		svc.ListProducts,
		opts...,
	))
	mux.Handle("/products.v1.ProductsService/CreateProduct", connect_go.NewUnaryHandler(
		"/products.v1.ProductsService/CreateProduct",
		svc.CreateProduct,
		opts...,
	))
	mux.Handle("/products.v1.ProductsService/UpdateProduct", connect_go.NewUnaryHandler(
		"/products.v1.ProductsService/UpdateProduct",
		svc.UpdateProduct,
		opts...,
	))
	mux.Handle("/products.v1.ProductsService/GetProduct", connect_go.NewUnaryHandler(
		"/products.v1.ProductsService/GetProduct",
		svc.GetProduct,
		opts...,
	))
	mux.Handle("/products.v1.ProductsService/GetProductOverview", connect_go.NewUnaryHandler(
		"/products.v1.ProductsService/GetProductOverview",
		svc.GetProductOverview,
		opts...,
	))
	return "/products.v1.ProductsService/", mux
}

// UnimplementedProductsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductsServiceHandler struct{}

func (UnimplementedProductsServiceHandler) ListProducts(context.Context, *connect_go.Request[v1.ListProductsRequest]) (*connect_go.Response[v1.ListProductsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("products.v1.ProductsService.ListProducts is not implemented"))
}

func (UnimplementedProductsServiceHandler) CreateProduct(context.Context, *connect_go.Request[v1.CreateProductRequest]) (*connect_go.Response[v1.CreateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("products.v1.ProductsService.CreateProduct is not implemented"))
}

func (UnimplementedProductsServiceHandler) UpdateProduct(context.Context, *connect_go.Request[v1.UpdateProductRequest]) (*connect_go.Response[v1.UpdateProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("products.v1.ProductsService.UpdateProduct is not implemented"))
}

func (UnimplementedProductsServiceHandler) GetProduct(context.Context, *connect_go.Request[v1.GetProductRequest]) (*connect_go.Response[v1.GetProductResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("products.v1.ProductsService.GetProduct is not implemented"))
}

func (UnimplementedProductsServiceHandler) GetProductOverview(context.Context, *connect_go.Request[v1.GetProductOverviewRequest]) (*connect_go.Response[v1.GetProductOverviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("products.v1.ProductsService.GetProductOverview is not implemented"))
}
