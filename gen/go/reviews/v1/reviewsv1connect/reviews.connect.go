// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: reviews/v1/reviews.proto

package reviewsv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/BradErz/monorepo/gen/go/reviews/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReviewsServiceName is the fully-qualified name of the ReviewsService service.
	ReviewsServiceName = "reviews.v1.ReviewsService"
)

// ReviewsServiceClient is a client for the reviews.v1.ReviewsService service.
type ReviewsServiceClient interface {
	CreateReview(context.Context, *connect_go.Request[v1.CreateReviewRequest]) (*connect_go.Response[v1.CreateReviewResponse], error)
	ListReviews(context.Context, *connect_go.Request[v1.ListReviewsRequest]) (*connect_go.Response[v1.ListReviewsResponse], error)
}

// NewReviewsServiceClient constructs a client for the reviews.v1.ReviewsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReviewsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReviewsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &reviewsServiceClient{
		createReview: connect_go.NewClient[v1.CreateReviewRequest, v1.CreateReviewResponse](
			httpClient,
			baseURL+"/reviews.v1.ReviewsService/CreateReview",
			opts...,
		),
		listReviews: connect_go.NewClient[v1.ListReviewsRequest, v1.ListReviewsResponse](
			httpClient,
			baseURL+"/reviews.v1.ReviewsService/ListReviews",
			opts...,
		),
	}
}

// reviewsServiceClient implements ReviewsServiceClient.
type reviewsServiceClient struct {
	createReview *connect_go.Client[v1.CreateReviewRequest, v1.CreateReviewResponse]
	listReviews  *connect_go.Client[v1.ListReviewsRequest, v1.ListReviewsResponse]
}

// CreateReview calls reviews.v1.ReviewsService.CreateReview.
func (c *reviewsServiceClient) CreateReview(ctx context.Context, req *connect_go.Request[v1.CreateReviewRequest]) (*connect_go.Response[v1.CreateReviewResponse], error) {
	return c.createReview.CallUnary(ctx, req)
}

// ListReviews calls reviews.v1.ReviewsService.ListReviews.
func (c *reviewsServiceClient) ListReviews(ctx context.Context, req *connect_go.Request[v1.ListReviewsRequest]) (*connect_go.Response[v1.ListReviewsResponse], error) {
	return c.listReviews.CallUnary(ctx, req)
}

// ReviewsServiceHandler is an implementation of the reviews.v1.ReviewsService service.
type ReviewsServiceHandler interface {
	CreateReview(context.Context, *connect_go.Request[v1.CreateReviewRequest]) (*connect_go.Response[v1.CreateReviewResponse], error)
	ListReviews(context.Context, *connect_go.Request[v1.ListReviewsRequest]) (*connect_go.Response[v1.ListReviewsResponse], error)
}

// NewReviewsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReviewsServiceHandler(svc ReviewsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/reviews.v1.ReviewsService/CreateReview", connect_go.NewUnaryHandler(
		"/reviews.v1.ReviewsService/CreateReview",
		svc.CreateReview,
		opts...,
	))
	mux.Handle("/reviews.v1.ReviewsService/ListReviews", connect_go.NewUnaryHandler(
		"/reviews.v1.ReviewsService/ListReviews",
		svc.ListReviews,
		opts...,
	))
	return "/reviews.v1.ReviewsService/", mux
}

// UnimplementedReviewsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReviewsServiceHandler struct{}

func (UnimplementedReviewsServiceHandler) CreateReview(context.Context, *connect_go.Request[v1.CreateReviewRequest]) (*connect_go.Response[v1.CreateReviewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reviews.v1.ReviewsService.CreateReview is not implemented"))
}

func (UnimplementedReviewsServiceHandler) ListReviews(context.Context, *connect_go.Request[v1.ListReviewsRequest]) (*connect_go.Response[v1.ListReviewsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("reviews.v1.ReviewsService.ListReviews is not implemented"))
}
