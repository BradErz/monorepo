// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file reviews/v1/reviews.proto (package reviews.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, Timestamp} from "@bufbuild/protobuf";

/**
 * @generated from message reviews.v1.CreateReviewRequest
 */
export class CreateReviewRequest extends Message<CreateReviewRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string body = 3;
   */
  body = "";

  /**
   * @generated from field: uint32 rating = 4;
   */
  rating = 0;

  constructor(data?: PartialMessage<CreateReviewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reviews.v1.CreateReviewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "rating", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReviewRequest {
    return new CreateReviewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReviewRequest {
    return new CreateReviewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReviewRequest {
    return new CreateReviewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReviewRequest | PlainMessage<CreateReviewRequest> | undefined, b: CreateReviewRequest | PlainMessage<CreateReviewRequest> | undefined): boolean {
    return proto3.util.equals(CreateReviewRequest, a, b);
  }
}

/**
 * @generated from message reviews.v1.CreateReviewResponse
 */
export class CreateReviewResponse extends Message<CreateReviewResponse> {
  /**
   * @generated from field: reviews.v1.Review review = 1;
   */
  review?: Review;

  constructor(data?: PartialMessage<CreateReviewResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reviews.v1.CreateReviewResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "review", kind: "message", T: Review },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateReviewResponse {
    return new CreateReviewResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateReviewResponse {
    return new CreateReviewResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateReviewResponse {
    return new CreateReviewResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateReviewResponse | PlainMessage<CreateReviewResponse> | undefined, b: CreateReviewResponse | PlainMessage<CreateReviewResponse> | undefined): boolean {
    return proto3.util.equals(CreateReviewResponse, a, b);
  }
}

/**
 * @generated from message reviews.v1.ListReviewsRequest
 */
export class ListReviewsRequest extends Message<ListReviewsRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListReviewsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reviews.v1.ListReviewsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReviewsRequest {
    return new ListReviewsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReviewsRequest {
    return new ListReviewsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReviewsRequest {
    return new ListReviewsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListReviewsRequest | PlainMessage<ListReviewsRequest> | undefined, b: ListReviewsRequest | PlainMessage<ListReviewsRequest> | undefined): boolean {
    return proto3.util.equals(ListReviewsRequest, a, b);
  }
}

/**
 * @generated from message reviews.v1.ListReviewsResponse
 */
export class ListReviewsResponse extends Message<ListReviewsResponse> {
  /**
   * @generated from field: repeated reviews.v1.Review reviews = 1;
   */
  reviews: Review[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListReviewsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reviews.v1.ListReviewsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reviews", kind: "message", T: Review, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListReviewsResponse {
    return new ListReviewsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListReviewsResponse {
    return new ListReviewsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListReviewsResponse {
    return new ListReviewsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListReviewsResponse | PlainMessage<ListReviewsResponse> | undefined, b: ListReviewsResponse | PlainMessage<ListReviewsResponse> | undefined): boolean {
    return proto3.util.equals(ListReviewsResponse, a, b);
  }
}

/**
 * @generated from message reviews.v1.Review
 */
export class Review extends Message<Review> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string product_id = 2;
   */
  productId = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 3;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp update_time = 4;
   */
  updateTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp delete_time = 5;
   */
  deleteTime?: Timestamp;

  /**
   * @generated from field: string title = 10;
   */
  title = "";

  /**
   * @generated from field: string body = 11;
   */
  body = "";

  /**
   * @generated from field: uint32 rating = 12;
   */
  rating = 0;

  constructor(data?: PartialMessage<Review>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reviews.v1.Review";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "create_time", kind: "message", T: Timestamp },
    { no: 4, name: "update_time", kind: "message", T: Timestamp },
    { no: 5, name: "delete_time", kind: "message", T: Timestamp },
    { no: 10, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "rating", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Review {
    return new Review().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Review {
    return new Review().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Review {
    return new Review().fromJsonString(jsonString, options);
  }

  static equals(a: Review | PlainMessage<Review> | undefined, b: Review | PlainMessage<Review> | undefined): boolean {
    return proto3.util.equals(Review, a, b);
  }
}

