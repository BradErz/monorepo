name: Docker build and push

on:
  workflow_call:
    inputs:
      service:
        required: true
        description: "Name of the service you wish to build. It must be in the services directory and it must have a Dockerfile specified under its folder."
        type: string


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/${{ inputs.service}}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # login to github package registry for docker containers
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # The builds require buildx to work, also so we can use github cache for docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install cosign
        uses: sigstore/cosign-installer@v2

      # Simple tagging policy for now
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push the docker image to github packages. Using github actions cache for layers.
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        id: build-and-push
        with:
          context: .
          file: services/${{ inputs.service }}/Dockerfile
          build-args: |
            PROJECT=./services/${{ inputs.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign the docker image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.7.1
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Trivy scan attestation
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          trivy image --format cosign-vuln -o vuln.json ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          cosign attest --type vuln --predicate vuln.json ${{ fromJSON(steps.meta.outputs.json).tags[0] }}